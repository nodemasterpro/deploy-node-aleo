---
- name: Manage an Aleo testnet node
  hosts: localhost
  become: true
  vars_prompt:
    - name: node_action
      prompt: "Enter the action to perform (install, update, remove)"
      private: false

  tasks:
    - name: Check if running as root
      ansible.builtin.command: id -u
      register: uid
      changed_when: false
      ignore_errors: true
      check_mode: false

    - name: Fail if not running as root
      ansible.builtin.fail:
        msg: "This playbook must be run as root."
      when: uid.stdout != "0"

    - name: Install dependencies
      ansible.builtin.apt:
        name:
          - make
          - clang
          - pkg-config
          - libssl-dev
          - build-essential
          - gcc
          - xz-utils
          - git
          - curl
          - vim
          - tmux
          - ntp
          - jq
          - llvm
          - ufw
        state: present
      when: node_action == "install"

    - name: Stop Aleo services before update
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: stopped
      loop:
        - aleo-client
        - aleo-prover
      when: node_action == "update"

    - name: Download Rustup installer
      ansible.builtin.get_url:
        url: https://sh.rustup.rs
        dest: "/tmp/rustup.sh"
        mode: '0755'
      when: node_action == "install"

    - name: Install Rustup and Rust
      ansible.builtin.shell: sh /tmp/rustup.sh -y
      args:
        creates: "{{ ansible_env.HOME }}/.cargo/bin/rustup"
      when: node_action == "install" or node_action == "update"

    - name: Update Rust to the latest stable version
      ansible.builtin.shell: "{{ ansible_env.HOME }}/.cargo/bin/rustup update stable"
      environment:
        PATH: "{{ ansible_env.PATH }}:{{ ansible_env.HOME }}/.cargo/bin"
      when: node_action == "install" or node_action == "update"


    - name: Clone snarkOS from GitHub repository (fork with fixes)
      ansible.builtin.git:
        repo : 'https://github.com/AleoHQ/snarkOS.git'
        #repo: 'https://github.com/BeckerFelix/snarkOS.git'
        dest: "{{ ansible_env.HOME }}/snarkOS"
        version: mainnet
        #version: fix/hotfix-mismatched-types # Specify the fork's branch
        depth: 1
        force: yes
      when: node_action == "install" or node_action == "update"


    - name: Install snarkOS
      when: node_action == "install" or node_action == "update"
      block:
        - name: Run build_ubuntu.sh
          ansible.builtin.command: bash build_ubuntu.sh
          args:
            chdir: "{{ ansible_env.HOME }}/snarkOS"

        - name: Install snarkOS using cargo with specific Rust version
          ansible.builtin.shell: "{{ ansible_env.HOME }}/.cargo/bin/rustup run stable cargo install --path ."
          args:
            chdir: "{{ ansible_env.HOME }}/snarkOS"
          environment:
            PATH: "{{ ansible_env.HOME }}/.cargo/bin:{{ ansible_env.PATH }}"


    - name: Generate an Aleo account and store keys
      when: node_action == "install"
      block:
        - name: Generate Aleo account
          ansible.builtin.command: snarkos account new
          args:
            chdir: "{{ ansible_env.HOME }}/snarkOS"
          environment:
            PATH: "{{ ansible_env.HOME }}/.cargo/bin:{{ ansible_env.PATH }}" 
          register: account_output
        - name: Save keys to a file
          ansible.builtin.copy:
            content: "{{ account_output.stdout }}"
            dest: "{{ ansible_env.HOME }}/aleo/account_new.txt"
            mode: "750"

    - name: Extract Prover Private Key
      shell: grep "Private Key" /root/aleo/account_new.txt | awk '{print $3}'
      register: prover_private_key_output
      when: node_action == "install"

    - name: Set Fact for Prover Private Key
      set_fact:
        prover_private_key: "{{ prover_private_key_output.stdout }}"
      when: node_action == "install"

    - name: Create Aleo client service
      ansible.builtin.template:
        src: aleo-client.service.j2
        dest: /etc/systemd/system/aleo-client.service
        mode: "0770"
      when: node_action == "install"

    - name: Create Aleo prover service
      ansible.builtin.template:
        src: aleo-prover.service.j2
        dest: /etc/systemd/system/aleo-prover.service
      when: node_action == "install"

    - name: Enable and start services
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: started
        enabled: true
      loop:
        - aleo-client
        - aleo-prover
      when: node_action == "install"


    - name: Remove Aleo
      when: node_action == "remove"
      block:
        - name: Stop and disable Aleo services
          ansible.builtin.systemd:
            name: "{{ item }}"
            state: stopped
            enabled: false
          loop:
            - aleo-client
            - aleo-prover
          ignore_errors: true
        - name: Remove Aleo files and configurations
          ansible.builtin.file:
            path: "{{ item }}"
            state: absent
          loop:
            - "{{ ansible_env.HOME }}/snarkOS"
            - "/etc/systemd/system/aleo-client.service"
            - "/etc/systemd/system/aleo-prover.service"

    - name: Print keys
      ansible.builtin.debug:
        msg: "Aleo account keys are stored in {{ ansible_env.HOME }}/aleo/account_new.txt" 

    - name: Reload systemd manager configuration
      ansible.builtin.systemd:
        daemon_reload: true
      when: node_action == "install" or node_action == "update"

    - name: Restart Aleo services
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: restarted
        enabled: true
      loop:
        - aleo-client
        - aleo-prover
      when: node_action == "install" or node_action == "update"